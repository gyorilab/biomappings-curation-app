# vim: set ft=conf :


# https://caddyserver.com/docs/caddyfile/options
{
  # servers {
  #   trusted_proxies static private_ranges
  #   trusted_proxies_strict
  # }
}

{$HOSTNAME} {
  tls internal

  handle /oauth2/* {
    reverse_proxy http://oauth2-proxy:4180 {
      # oauth2-proxy requires the X-Real-IP and X-Forwarded-{Proto,Host,Uri} headers. The
      # reverse_proxy directive automatically sets X-Forwarded-{For,Proto,Host} headers.
      #
      # https://caddyserver.com/docs/caddyfile/directives/reverse_proxy#defaults
      header_up X-Real-IP {remote_host}
      header_up X-Forwarded-Uri {uri}
    }
  }

  handle {
    forward_auth http://oauth2-proxy:4180 {
      uri /oauth2/auth

      # oauth2-proxy requires the X-Real-IP and X-Forwarded-{Proto,Host,Uri} headers. The
      # forward_auth directive automatically sets the X-Forwarded-{For,Proto,Host,Method,Uri}
      # headers.
      #
      # https://caddyserver.com/docs/caddyfile/directives/forward_auth#expanded-form
      header_up X-Real-IP {remote_host}

      # If needed, you can copy headers from the oauth2-proxy response to the request sent to the
      # upstream. Make sure to configure the --set-xauthrequest flag to enable this feature.
      copy_headers X-Auth-Request-Email X-Auth-Request-Groups X-Auth-Request-Preferred-Username X-Auth-Request-User

      # If oauth2-proxy returns a 401 status, redirect the client to the sign-in page.
      @unauthorized status 401
      handle_response @unauthorized {
        @sign_in_required not path / /summary
        handle @sign_in_required {
          redir * /oauth2/sign_in?rd={scheme}://{host}{uri}
        }
      }
    }

    # If oauth2-proxy returns a 2xx status, the request is then proxied to the upstream.
    reverse_proxy http://app:5000 {
      # "[Y]ou need to make sure that [the proxy server] buffers slow clients when you use
      # default Gunicorn workers. Without this buffering Gunicorn will be easily susceptible to
      # denial-of-service attacks."
      #
      # https://docs.gunicorn.org/en/stable/deploy.html
      request_buffers unlimited
    }
  }
}
