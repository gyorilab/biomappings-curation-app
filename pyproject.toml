# vim: set ft=toml :


[project]
name = 'biomappings-curation-app'


[tool.pixi.project]
channels = ['conda-forge']
platforms = [
  'linux-64',
  'linux-aarch64',
  'osx-arm64',
]

[tool.pixi.dependencies]
git = { version = '>=2.49.0' }
python = { version = '>=3.13.2,<3.14' }

[tool.pixi.pypi-dependencies]
biomappings = { version = '>=0.3.7' }
bioregistry = { version = '>=0.12.10' }
bootstrap-flask = { version = '>=2.4.2' }
flask = { version = '>=3.1.0' }
flask-sqlalchemy = { version = '>=3.1.1' }
flask-wtf = { version = '>=1.2.2' }
gunicorn = { version = '>=23.0.0', extras = ['gthread'] }
httpx = { version = '>=0.28.1', extras = ['http2'] }
psycopg = { version = '>=3.2.6', extras = ['binary'] }
pydantic = { version = '>=2.11.3' }
sqlalchemy = { version = '>=2.0.40' }
stamina = { version = '>=25.1.0' }
werkzeug = { version = '>=3.1.3' }
wtforms = { version = '>=3.2.1' }

[tool.pixi.environments]
default = { solve-group = 'default' }
lint = { features = ['lint'], solve-group = 'default' }
secrets = { features = ['secrets'] }

[tool.pixi.feature.lint.pypi-dependencies]
mypy = { version = '>=1.15.0', extras = ['faster-cache'] }
pre-commit = { version = '>=4.2.0' }
pre-commit-hooks = { version = '>=5.0.0' }
ruff = { version = '>=0.11.4' }
types-wtforms = { version = '>=3.2.1.20250401' }

[tool.pixi.feature.lint.tasks]
lint = { depends-on = ['pre-commit-run'] }
pre-commit-run = { cmd = ['pre-commit', 'run', '--all-files'] }
pre-commit-install = { depends-on = [
  '_pre-commit-install-commit-msg',
  '_pre-commit-install-post-checkout',
  '_pre-commit-install-post-commit',
  '_pre-commit-install-post-merge',
  '_pre-commit-install-post-rewrite',
  '_pre-commit-install-pre-commit',
  '_pre-commit-install-pre-merge-commit',
  '_pre-commit-install-pre-push',
  '_pre-commit-install-pre-rebase',
  '_pre-commit-install-prepare-commit-msg',
] }
_pre-commit-install-commit-msg = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'commit-msg',
] }
_pre-commit-install-post-checkout = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-checkout',
] }
_pre-commit-install-post-commit = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-commit',
] }
_pre-commit-install-post-merge = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-merge',
] }
_pre-commit-install-post-rewrite = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-rewrite',
] }
_pre-commit-install-pre-commit = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-commit',
] }
_pre-commit-install-pre-merge-commit = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-merge-commit',
] }
_pre-commit-install-pre-push = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-push',
] }
_pre-commit-install-pre-rebase = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-rebase',
] }
_pre-commit-install-prepare-commit-msg = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'prepare-commit-msg',
] }

[tool.pixi.feature.secrets.dependencies]
go-sops = { version = '>=3.10.1' }

[tool.pixi.feature.secrets.tasks]
clone-biomappings-repo = { depends-on = [
  '_rm-biomappings-repo',
  '_clone-biomappings-repo',
] }
configure-sops-diff = { cmd = [
  'git',
  'config',
  'set',
  '--local',
  '--',
  'diff.sopsDiff.textconv',
  'pixi run -e secrets -q --frozen --no-progress -- sops decrypt --',
] }
deploy = { depends-on = [
  '_remote-systemctl-stop-app',
  '_remote-rm-repo',
  '_remote-copy-repo',
  '_remote-clone-biomappings-repo',
  '_remote-docker-image-rm-app',
  '_remote-rm-volume-postgres',
  '_remote-copy-systemd-app',
  '_remote-systemctl-daemon-reload',
  '_remote-systemctl-start-app',
  '_remote-systemctl-status-app',
  '_remote-journalctl-follow-app',
] }
down = { cmd = [
  'sops',
  'exec-env',
  '--same-process',
  '--',
  'env/secret.sops.env',
  'docker compose down',
] }
edit-secrets = { cmd = ['sops', 'edit', '--', 'env/secret.sops.env'] }
refresh-keys = { depends-on = ['update-keys', 'rotate-keys'] }
rotate-keys = { cmd = ['sops', 'rotate', '--in-place', '--', 'env/secret.sops.env'] }
up = { cmd = [
  'sops',
  'exec-env',
  '--same-process',
  '--',
  'env/secret.sops.env',
  'docker compose up',
] }
update-keys = { cmd = ['sops', 'updatekeys', '--yes', '--', 'env/secret.sops.env'] }
_remote-clone-biomappings-repo = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'pixi run --manifest-path /data/biomappings-curation-app -- clone-biomappings-repo',
] }
_remote-copy-repo = { cmd = '''git archive --prefix=biomappings-curation-app/ -- main | ssh -- biomappings-curation-app 'tar -x -C /data -f -';''' }
_remote-copy-systemd-app = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'sudo -- cp -- /data/biomappings-curation-app/resources/systemd/biomappings-curation-app.service /etc/systemd/system',
] }
_remote-docker-image-rm-app = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'docker image rm -f -- biomappings-curation-app-app:latest',
] }
_remote-journalctl-follow-app = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'journalctl --follow --unit=biomappings-curation-app.service',
] }
_remote-rm-repo = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'rm -fr -- /data/biomappings-curation-app',
] }
_remote-rm-volume-postgres = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'docker volume rm -f -- biomappings-curation-app_postgres-data',
] }
_remote-systemctl-daemon-reload = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'sudo -- systemctl daemon-reload',
] }
_remote-systemctl-start-app = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'sudo -- systemctl start -- biomappings-curation-app.service',
] }
_remote-systemctl-status-app = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'systemctl status -- biomappings-curation-app.service',
] }
_remote-systemctl-stop-app = { cmd = [
  'ssh',
  '--',
  'biomappings-curation-app',
  'sudo -- systemctl stop -- biomappings-curation-app.service',
] }
_rm-biomappings-repo = { cmd = ['rm', '-fr', '--', 'resources/biomappings'] }

[tool.pixi.feature.secrets.tasks._clone-biomappings-repo]
env = { REPOSITORY = 'https://github.com/manselmi/biomappings.git' }
cmd = '''sops exec-env --same-process -- env/secret.sops.env 'git clone --config=credential.useHttpPath=true --config="credential.${REPOSITORY}.helper"='"'"'!f() { test "${1}" = "get" && printf "%s\n" authtype=basic "credential=$(printf "%s" "oauth2:${GITHUB_TOKEN}" | base64 -w 0)" ephemeral=true; }; f'"'"' --depth=1 --origin=origin -- "${REPOSITORY}" resources/biomappings';'''


[tool.mypy]
exclude = [
  '^resources/biomappings/',
]
local_partial_types = true
plugins = [
  'pydantic.mypy',
]
python_version = '3.13'
strict_bytes = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  'biomappings.resources',
  'biomappings.utils',
  'flask_bootstrap',
  'flask_wtf',
]


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true


[tool.ruff]
extend-exclude = [
  'resources/biomappings',
]
line-length = 100
target-version = 'py313'

[tool.ruff.lint]
dummy-variable-rgx = '^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$'
fixable = ['ALL']
ignore = [
  'ANN',      # mypy handles our type annotations
  'C901',
  'COM812',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'COM819',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'CPY',      # not publishing publicly
  'D',        # we prefer our own docstring style
  'E111',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'E114',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'E117',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'ERA',      # do not remove commented-out code
  'INP001',
  'ISC001',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'ISC002',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'PLR0912',
  'PLR0913',
  'PLR0915',
  'Q000',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'Q001',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'Q002',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'Q003',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'S603',
  'S607',
  'SLF001',
  'TCH',      # TYPE_CHECKING blocks break autodocs
  'TRY003',
  'W191',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
]
select = ['ALL']
unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = [
  'biomappings',
]
known-local-folder = []
known-third-party = [
  'bioregistry',
  'flask',
  'flask_bootstrap',
  'flask_sqlalchemy',
  'flask_wtf',
  'httpx',
  'pydantic',
  'sqlalchemy',
  'stamina',
  'werkzeug',
  'wtforms',
]
