# vim: set ft=yaml :


name: 'biomappings-curation-app'

networks:

  external:
  internal:
    internal: true

services:

  caddy:
    depends_on:
      - 'app'
      - 'oauth2-proxy'
    env_file:
      - path: './env/common.env'
      - path: './env/caddy.env'
    image: 'docker.io/library/caddy:2.10.0'
    networks:
      - 'external'
    ports:
      - app_protocol: 'https'
        mode: 'host'
        protocol: 'tcp'
        published: '${HTTPS_PORT:-443}'
        target: 443
      - app_protocol: 'https'
        mode: 'host'
        protocol: 'udp'
        published: '${HTTPS_PORT:-443}'
        target: 443
    restart: 'unless-stopped'
    volumes:
      - source: './resources/caddy/conf'
        target: '/etc/caddy'
        type: 'bind'
        read_only: true
      - source: 'caddy-data'
        target: '/data'
        type: 'volume'

  oauth2-proxy:
    command: ['--config', '/etc/oauth2-proxy/oauth2-proxy.toml']
    env_file:
      - path: './env/common.env'
      - path: './env/oauth2-proxy.env'
    environment:
      OAUTH2_PROXY_CLIENT_SECRET: '${OAUTH2_PROXY_CLIENT_SECRET}'
      OAUTH2_PROXY_COOKIE_SECRET: '${OAUTH2_PROXY_COOKIE_SECRET}'
    image: 'quay.io/oauth2-proxy/oauth2-proxy:v7.9.0'
    networks:
      - 'external'
    restart: 'unless-stopped'
    volumes:
      - source: './resources/oauth2-proxy/oauth2-proxy.toml'
        target: '/etc/oauth2-proxy/oauth2-proxy.toml'
        type: 'bind'
        read_only: true

  postgres:
    env_file:
      - path: './env/common.env'
      - path: './env/postgres.env'
    image: 'docker.io/library/postgres:17.5'
    networks:
      - 'internal'
    restart: 'unless-stopped'
    volumes:
      - source: 'postgres-data'
        target: '/var/lib/postgresql/data'
        type: 'volume'

  app:
    build:
      args:
        PIXI_VERSION: '0.46.0'
      context: '.'
      dockerfile: './resources/app/app.dockerfile'
    command:
      - 'gunicorn'
      - '--bind=0.0.0.0:5000'
      - '--worker-class=gthread'
      - '--workers=4'
      - '--'
      - 'app:app'
    depends_on:
      - 'postgres'
    env_file:
      - path: './env/common.env'
      - path: './env/postgres.env'
      - path: './env/app.env'
    environment:
      GITHUB_TOKEN: '${GITHUB_TOKEN}'
    expose:
      - '5000/tcp'
    networks:
      - 'external'
      - 'internal'
    restart: 'unless-stopped'
    volumes:
      - source: './app.py'
        target: '/app/app.py'
        type: 'bind'
        read_only: true
      - source: './resources/app/gunicorn.conf.py'
        target: '/app/gunicorn.conf.py'
        type: 'bind'
        read_only: true
      - source: './resources/app/templates'
        target: '/app/templates'
        type: 'bind'
        read_only: true
      - source: './resources/biomappings'
        target: '/app/biomappings'
        type: 'bind'
        read_only: true

volumes:

  caddy-data:
  postgres-data:
